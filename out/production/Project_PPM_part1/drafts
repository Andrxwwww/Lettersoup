//Rascunho

-> usado para testar a geração de caracteres aleatórios
    /*for (i <- 1 to 28) { // tem de ser 28 por causa do algoritmo de geração de caracteres aleatórios , que repete o J e o S
      val rand = MyRandom(i)
      val (char, newRand) = gameLogic.randomChar(rand)
      println(char)
    }*/

-> usado para testar a geração de palavras aleatórias

    //test T1
    val gameLogic = new GameLogic()
    val rand = MyRandom(21)
    val rand = MyRandom(System.currentTimeMillis()) // para o output mudar a cada execução, só usar System.currentTimeMillis() na seed
    val (char, _) = gameLogic.randomChar(rand)
    println(char)

-> usado para testar a fazer uma board com n*n tamanho com char aleatorios

  //T - test function
  def generateBoard(n: Int, rand: MyRandom): Board = {
    def fillBoard(board: Board, i: Int, j: Int, rand: MyRandom): Board = {
      if (i >= n) board
      else if (j >= n) fillBoard(board, i + 1, 0, rand)
      else {
        val (char, newRand) = randomChar(rand)
        val newBoard = fillOneCell(board, (i, j), char)
        fillBoard(newBoard, i, j + 1, newRand)
      }
    }
    fillBoard(List.fill(n, n)('-'), 0, 0, rand)
  }
  def printBoard(board: Board): Unit = board match {
    case Nil => ()
    case head :: tail =>
      println(head.mkString(" "))
      printBoard(tail)
  }

  * Main func for it ->
     val gameLogic = new GameLogic
     val rand = MyRandom(41)
     val board = gameLogic.generateBoard(5, rand)
     gameLogic.printBoard(board)