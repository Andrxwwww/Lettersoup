//Rascunho

-> usado para testar a geração de caracteres aleatórios - T1
    /*for (i <- 1 to 28) { // tem de ser 28 por causa do algoritmo de geração de caracteres aleatórios , que repete o J e o S
      val rand = MyRandom(i)
      val (char, newRand) = gameLogic.randomChar(rand)
      println(char)
    }*/

-> usado para testar a geração de palavras aleatórias - T1

    //test T1
    val gameLogic = new GameLogic()
    val rand = MyRandom(21)
    val rand = MyRandom(System.currentTimeMillis()) // para o output mudar a cada execução, só usar System.currentTimeMillis() na seed
    val (char, _) = gameLogic.randomChar(rand)
    println(char)

-> usado para testar a fazer uma board com n*n tamanho com char aleatorios - T1.5

  //T - test function
  def generateBoard(n: Int, rand: MyRandom): Board = {
    def fillBoard(board: Board, i: Int, j: Int, rand: MyRandom): Board = {
      if (i >= n) board
      else if (j >= n) fillBoard(board, i + 1, 0, rand)
      else {
        val (char, newRand) = randomChar(rand)
        val newBoard = fillOneCell(board, (i, j), char)
        fillBoard(newBoard, i, j + 1, newRand)
      }
    }
    fillBoard(List.fill(n, n)('-'), 0, 0, rand)
  }
  def printBoard(board: Board): Unit = board match {
    case Nil => ()
    case head :: tail =>
      println(head.mkString(" "))
      printBoard(tail)
  }


  * Main func for it ->
     val gameLogic = new GameLogic
     val rand = MyRandom(41)
     val board = gameLogic.generateBoard(5, rand)
     gameLogic.printBoard(board)

-> usado para testar a funcao de dar return de uma palavra aleatoria de um .txt file

    object TestBackUtilFunc {
        def main(args: Array[String]): Unit = {
        val backUtil = new BackUtil
        val word = backUtil.randomWord("src/Lettersoup/Palavras.txt")
        print(word)
        }
    }

-> codigo teste usado para testar se a sequencia de coordenadas é valida para depois mais tarde associar um char

    val rand = MyRandom(System.currentTimeMillis())
    val gameLogic = new GameLogic
    val board = List.fill(5,5)('-')
    println(board.map(_.mkString(" ")).mkString("\n"))
    println(" ")
    println("Random coordinate -> " + randomCoord( rand , board)._1)
    println("Possible Sequence for it -> " + listSequence(board, randomCoord( rand , board)._1, 4))

-> old main func :

        println(" ")
        val listWords = listOfWordsAndIsSize("src/Lettersoup/Palavras.txt")

        val possibleSequence = listSequence(board, listOfRandomCoords(rand,board,listWords._1.length) ,listWords._2)
        println("Random words -> " + listWords)
        println("Random coordinate -> " + listOfRandomCoords(rand,board,listWords._1.length))
        println("Possible Sequence for it -> " + possibleSequence)

        val BoardWithWord = gameLogic.setBoardWithWords(board, listWords._1, possibleSequence)
        println(" ")
        println("Board with the word:")
        println(BoardWithWord.map(_.mkString(" ")).mkString("\n"))

        val boardCompleted = gameLogic.completeBoardRandomly(BoardWithWord, rand, MyRandom => (randomChar(MyRandom)._1, MyRandom))._1
        println(" ")
        println("Board completed:")
        println(boardCompleted.map(_.mkString(" ")).mkString("\n"))